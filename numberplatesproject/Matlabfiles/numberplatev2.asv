close all; %close all previous figures

%when debug is 0 only the gray image with the locating box is shown
debug = 1;

%the most effective number plate template so far
tfilename = 'numberplatetemplate5.jpg'; 

%Can be used on all images to varying success levels
filename = input('Please enter the filename to search: ', 's')

%Checks if the image is grayscale before trying to convert it
if size(imread(filename),3) == 3 
    originalimage = rgb2gray(imread(filename));
elseif size(imread(filename),3) == 1
    originalimage = imread(filename);
end

%Unchanged image for final display
image = originalimage;

%Creates a border to reduce false positve likelyhood
bottomrow= round(size(image,1)*5/6);
toprow = round(size(image,1)/6);
leftrow = round(size(image,2)/6);
rightrow = round(size(image,2)*5/6);

%Masks the outside border of the image (as all the images have the number
%plate within the center 67% of the image
mask = false(size(image)); 
mask(toprow:bottomrow,leftrow:rightrow) = true; %Creates a mask for the outside rim of the image
image(~mask) = 1;

%If debug is 0 this image does not need to be shown at the end in
%comparison to the original image
if debug == 1
    image1 = image;
end

%Does the same as a binary conversion
thresholdvalue = 150;
binaryimage = image > thresholdvalue;

%Fills holes in the binary image in for blob detection, was discarded
%filledimage = imfill(binaryimage,'holes');
%figure, imshow(filledimage)

%symbols = [2temp.jpg 7temp.jpg

%for k = 1 : 4
%    stemplate = im2bw(rgb2gray(imread('2temp.jpg')));
%    c[k] = normxcorr2(stemplate,binaryimage);
%    if c[k] > 0.4
%        [ypeak, xpeak] = find(c==max(c(:)));
%        yoffset = ypeak-size(stemplate,1);
%        xoffset = xpeak-size(stemplate,2);
%end
%mask = false(size(image)); 
%mask(ypeak-(size(stemplate,1)*2):ypeak+(size(stemplate,1)*2),xpeak-(size(stemplate,2)*7):xpeak+(size(stemplate,2)*7)) = true; %Creates a mask for the outside rim of the image
%image(~mask) = 1;

%Reads in the template image, converting it into binary at the same time
template = im2bw(rgb2gray(imread(tfilename)));
templatesizes = [1.0 0.9 0.8 0.7 0.6 0.5 0.4 0.3];

%Finds the scale of number plate which has the highest peak value to reduce
%the size of the image again
for k = 1:8
    template = im2bw(rgb2gray(imread(tfilename)));
    template = imresize(template, templatesizes(k));
    c = normxcorr2(template,binaryimage);
    resultxcorr(k) = max(c(:));
end

%Reapplies the template with the highest peak value
[ymax, xmax] = max(resultxcorr);
template = im2bw(rgb2gray(imread(tfilename)));
template = imresize(template, templatesizes(xmax));
c = normxcorr2(template,binaryimage);

%Converts the normxcorr2 value into binary for image reduction
thresholdvalue = 0.18;
binarycorr = c > thresholdvalue;

%Finds the left-most and right-most successful template values to reduce
%the image size
[leftrow, leftcolumn] = find(binarycorr, 1, 'first');
[rightrow, rightcolumn] = find(binarycorr, 1, 'last');

%Finds the top-most successful template value to reduce the image size
for k = 1:(size(binarycorr,1))
    if ~isempty(find(binarycorr(k,:)))
        toprow = k;
        break
    end
end

%Finds the bottom-most successful template value to reduce the image size
for k = (size(binarycorr,1)):1
    if ~isempty(find(binarycorr(k,:)))
        bottomrow = k;
        break
    end
end

%Performs the secondary image masking to reduce the number of false
%positives
mask = false(size(image)); 
mask(round(toprow - (size(template,1)/2)):round(bottomrow + (size(template,1)/2)),...
    round(leftcolumn - (size(template,2)/2)):round(rightcolumn + (size(template,2)/2))) = true;
image(~mask) = 1;

if debug == 1
    image2 = image;
end

%Creates a box for the most successful template matching
[ypeak, xpeak] = find(c==max(c(:)));
yoffset = ypeak-size(template,1);
xoffset = xpeak-size(template,2);
hfig = figure;
hAx = axes;

%If debug is 1 displays each of th
if debug == 1
    imshow(originalimage, 'Parent', hAx);
    figure, imshow(image1);
    figure, imshow(image2);
    figure, imshow(template);
    imrect(hAx, [xoffset, yoffset, size(template,2), size(template,1)]);
else
    imshow(originalimage,'Parent', hAx);
    imrect(hAx, [xoffset, yoffset, size(template,2), size(template,1)]);
end